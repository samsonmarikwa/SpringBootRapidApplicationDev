Difference between Setter and Constructor Injection in Spring framework

Spring supports both setter and constructor Injection, which are two standard ways of injecting dependency on beans managed by IOC constructor.

1) The fundamental difference between setter and constructor injection, as their name implies, is How dependency is injected. Setter injection
in Spring uses setter methods like setDependency() to inject dependency on any bean managed by Spring's IOC container. On the other hand,
constructor injection uses the constructor to inject dependency on any Spring-managed bean.

2) Setter injection is more readable in comparison to the constructor injection as the setter method always has names starting with the word set like
setXYZ() and thus, it is easy to read in the Spring XML config file and interpret the dependency that is being set whereas the Constructor injection
uses an index for the purpose of injecting dependency.

3) If you use setter injection, the setter may or may not be called, so the instance may never be provided with its dependency. The only way to force the
setter to be called is using @Required or @Autowired , which is specific to Spring and is therefore not container-agnostic.

So to keep your code independent of Spring, use constructor arguments for injection. This applies to tests; you'll have an easier time instantiating
and testing the class in a normal unit test, without needing to configure an application context or the complexity that comes along with setting up
an integration test.

4) One more drawback of setter Injection is Security. You can override certain dependency which is not possible with constructor injection because every
time you call the constructor, a new object gets created.


When to use Setter Injection over Constructor Injection in Spring
Setter vs Constructor Injection in Spring framework - Interview question
> Setter Injection has upper hand over Constructor Injection in terms of readability. Since for configuring Spring we use XML files, readability is a much bigger concern.
Also, a drawback of setter Injection around ensuring mandatory dependency injected or not can be handled by configuring Spring to check dependency using "dependency-check" attribute of tag or tag. 

Another worth noting point to remember while comparing Setter Injection vs Constructor Injection is that once a number of dependencies crossed a threshold like 5 or 6 it's handily manageable to
passing dependency via the constructor. Setter Injection is the preferred choice when a number of dependencies to be injected is a lot more than normal, if some of those arguments are
optional then using a Builder design pattern is also a good option.


A constructor therefore enforces the dependency requirement whether or not you're using Spring, making it container-agnostic.


Partial dependency:
can be injected using setter injection but it is not possible by constructor. Suppose there are 3 properties in a class, having 3 arg constructor and setters methods.
In such case, if you want to pass information for only one property, it is possible by setter method only.

Overriding:
Setter injection overrides the constructor injection. If we use both constructor and setter injection, IOC container will use the setter injection.

Changes: We can easily change the value by setter injection. It doesn't create a new bean instance always like constructor. So setter injection is flexible
than constructor injection.

Use Case
Constructor Dependency Injection:	It should be used for mandatory dependencies
Setter Dependency Injection:	It should be used for optional dependencies.